#!/usr/bin/env node
var be=Object.create;var C=Object.defineProperty;var we=Object.getOwnPropertyDescriptor;var Ce=Object.getOwnPropertyNames;var je=Object.getPrototypeOf,Ue=Object.prototype.hasOwnProperty;var Ne=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of Ce(t))!Ue.call(e,s)&&s!==r&&C(e,s,{get:()=>t[s],enumerable:!(o=we(t,s))||o.enumerable});return e};var p=(e,t,r)=>(r=e!=null?be(je(e)):{},Ne(t||!e||!e.__esModule?C(r,"default",{value:e,enumerable:!0}):r,e));var ke=p(require("express")),a=require("@refinedev/devtools-shared");var j=p(require("express")),S=p(require("path")),U=e=>{e.use(j.default.static(S.default.join(__dirname,"client"))),e.use((t,r,o)=>{if(t.path.startsWith("/api")||t.path.startsWith("/open-in-editor"))return o();r.status(200).sendFile(S.default.join(`${__dirname}/client/index.html`))})};var F=p(require("ws"));var D="https://auth.refine.dev",N="https://cloud2.refine.dev",V="/api/login",A="/api/login-callback",H="/after-login",$="https://raw.githubusercontent.com/refinedev/refine/master/packages/devtools-server/FEED.md";var T=require("@refinedev/devtools-shared"),_=require("chalk"),M=(e,t)=>{let r=new F.default.Server({server:e}).on("error",o=>{(o==null?void 0:o.code)==="EADDRINUSE"?console.error(`
${_.cyanBright.bold("\u2717 ")}${(0,_.bold)("Refine Devtools server")} (websocket) failed to start. Port ${5001} is already in use.
`):console.error(`
${_.cyanBright.bold("\u2717 ")}${(0,_.bold)("error from refine devtools")}`,o),r.close(()=>{}),t()});return r.on("connection",o=>{(0,T.send)(o,T.DevtoolsEvent.DEVTOOLS_HANDSHAKE,{url:`http://localhost:${5001}`}),o.on("close",()=>{o.terminate()})}),process.on("SIGTERM",()=>{r.close(()=>{})}),r};var Qe=require("lodash/debounce"),ze=require("@refinedev/devtools-shared"),et=require("ws"),G=()=>0;var h=require("chalk"),q=p(require("http")),W=(e,t)=>{let r=q.default.createServer(e);return r.on("error",o=>{(o==null?void 0:o.code)==="EADDRINUSE"?console.error(`
${h.cyanBright.bold("\u2717 ")}${(0,h.bold)("Refine Devtools server")} (http) failed to start. Port ${5001} is already in use.
`):console.error(`
${h.cyanBright.bold("\u2717 ")}${(0,h.bold)("error from Refine Devtools")}`,o),r.close(()=>{}),t()}).on("listening",()=>{console.log(`
${h.cyanBright.bold("\u2713 ")}${(0,h.bold)("Refine Devtools")} is running at port ${h.cyanBright.bold(5001)}
`)}),process.on("SIGTERM",()=>{r.close(()=>{})}),r.listen(5001,void 0,void 0,()=>{}),r};var Ve={connectedApp:null,clientWs:null,devtoolsWsClients:[],appWsClients:[],activities:[],packages:[]},J=()=>({...Ve});var _e=require("express"),ye=p(require("lodash/uniq"));var K=p(require("node-fetch")),B=p(require("gray-matter")),I=require("marked"),O=p(require("sanitize-html"));var He=e=>e.split("---section").slice(1).map(r=>`---section${r}`),$e=e=>{let t=new I.marked.Renderer;t.link=function(...o){return I.marked.Renderer.prototype.link.apply(this,o).replace(/^<a/,'<a target="_blank" rel="noopener noreferrer"')};let r=(0,I.marked)(e,{renderer:t});return(0,O.default)(r,{allowedTags:O.default.defaults.allowedTags.concat(["img"]),allowedAttributes:{...O.default.defaults.allowedAttributes,img:["src"]}})},Fe=e=>{let t=(0,B.default)(e.replace("---section","---"));return{...t.data,content:$e(t.content)}},Me=async()=>{try{return(await(0,K.default)($)).text()}catch{return""}},Q=async()=>{try{let e=await Me();return He(e).map(Fe)}catch{return[]}};var Z=p(require("fs"));var Y=p(require("path")),z=p(require("globby")),X=async e=>{try{let t=await(0,z.default)(`node_modules/${e}/package.json`,{onlyFiles:!0}),r=null;try{let o=require.resolve(Y.default.join(e,"package.json"));o&&(r=o)}catch{}return[...t,...r?[r]:[]][0]??null}catch{return null}};var ee=async e=>{try{let t=await X(e);if(!t)return null;let r=JSON.parse(Z.default.readFileSync(t,{encoding:"utf-8"}));return{name:r.name,version:r.version,description:r.description}}catch{return null}};var te=p(require("path")),re=require("fs-extra"),L=async(e=process.cwd())=>{let t=await(0,re.readJSON)(te.default.join(e,"package.json"),{encoding:"utf-8"});return Object.keys(t.dependencies).filter(o=>o.startsWith("@refinedev/"))};var ne=e=>e.replace("@refinedev/","https://c.refine.dev/");var oe=e=>"https://refine.dev/docs/api-reference/general-concepts/";var ie=async e=>{try{let t=await L(e);return await Promise.all(t.map(async o=>{let s=await ee(o);return{name:o,currentVersion:s==null?void 0:s.version,description:s==null?void 0:s.description,changelog:ne(o),documentation:oe(o)}}))}catch{return[]}};var m=p(require("dedent"));var Ge=[{name:"@refinedev/ably",description:"Ably integration for Refine",install:"npm install @refinedev/ably",usage:(0,m.default)(`
            import { liveProvider, Ably } from "@refinedev/ably";

            export const ablyClient = new Ably.Realtime("YOUR_API_TOKEN");

            const App = () => {
                return (
                    <Refine
                        liveProvider={liveProvider(ablyClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
        `.trim())},{name:"@refinedev/airtable",description:"Airtable integration for Refine",install:"npm install @refinedev/airtable",usage:(0,m.default)(`
            import dataProvider from "@refinedev/airtable";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_KEY", "BASE_ID")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/antd",description:"Ant Design integration for Refine",install:"npm install @refinedev/antd antd",usage:(0,m.default)(`
            import { ThemedLayoutV2 } from "@refinedev/antd";

            import "@refinedev/antd/dist/reset.css";

            const App = () => {
                return (
                    <Refine
                        /* ... */
                    >
                        <ThemedLayoutV2>
                            {/* ... */}
                        </ThemedLayoutV2>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/appwrite",description:"Appwrite integration for Refine",install:"npm install @refinedev/appwrite",usage:(0,m.default)(`
            import { dataProvider, liveProvider, Account, Appwrite, Storage } from "@refinedev/appwrite";

            const appwriteClient = new Appwrite();
            appwriteClient.setEndpoint("API_URL").setProject("PROJECT_ID");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(appwriteClient, { databaseId: "default" })}
                        liveProvider={liveProvider(appwriteClient, { databaseId: "default" })}
                        /* ... */
                    >
                        <ThemedLayout>
                            {/* ... */}
                        </ThemedLayout>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/chakra-ui",description:"Chakra UI integration for Refine",install:"npm install @refinedev/chakra-ui @chakra-ui/react @emotion/react @emotion/styled framer-motion @tabler/icons-react",usage:(0,m.default)(`
            import { ThemedLayoutV2 } from "@refinedev/chakra-ui";
            import { ChakraProvider } from "@chakra-ui/react";

            const App = () => {
                return (
                        <ChakraProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ChakraProvider>
                );
            };
            `.trim())},{name:"@refinedev/graphql",description:"GraphQL integration for Refine",install:"npm install @refinedev/graphql",usage:(0,m.default)(`
            import dataProvider, { GraphQLClient } from "@refinedev/graphql";

            const client = new GraphQLClient("YOUR_API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/hasura",description:"GraphQL integration for Refine",install:"npm install @refinedev/hasura",usage:(0,m.default)(`
            import dataProvider, { GraphQLClient } from "@refinedev/hasura";

            const client = new GraphQLClient("HASURA_API_URL", {
                headers: {
                    "x-hasura-role": "public",
                },
            });

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/inferencer",description:"Auto generate views based on your APIs with Refine",install:"npm install @refinedev/inferencer",usage:(0,m.default)(`
        import { AntdInferencer } from "@refinedev/inferencer/antd";

        const App = () => {
            return (
                <Refine
                    /* ... */
                >
                    <AntdInferencer action="list" resource="posts" />
                </Refine>
            );
        };
        `.trim())},{name:"@refinedev/kbar",description:"Command palette integration with kbar for Refine",install:"npm install @refinedev/kbar",usage:(0,m.default)(`
            import { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";

            const App = () => {
                return (
                    <RefineKbarProvider>
                        <Refine
                            /* ... */
                        >
                            <RefineKbar />
                        </Refine>
                    </RefineKbarProvider>
                );
            };
        `.trim())},{name:"@refinedev/mantine",description:"Mantine UI integration for Refine",install:"npm install @refinedev/mantine @refinedev/react-table @mantine/core @mantine/hooks @mantine/form @mantine/notifications @emotion/react @tabler/icons-react",usage:(0,m.default)(`
            import { ThemedLayoutV2 } from "@refinedev/mantine";
            import { MantineProvider } from "@mantine/core";

            const App = () => {
                return (
                    <MantineProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </MantineProvider>
                );
            };
            `.trim())},{name:"@refinedev/medusa",description:"Medusa store integration for Refine",install:"npm install @refinedev/medusa",usage:(0,m.default)(`
            import dataProvider, { authProvider } from "@refinedev/medusa";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        authProvider={authProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/mui",description:"Material UI integration for Refine",install:"npm install @refinedev/mui @refinedev/react-hook-form @mui/material @mui/lab @mui/x-data-grid @emotion/react @emotion/styled react-hook-form",usage:(0,m.default)(`
            import { ThemedLayoutV2 } from "@refinedev/mui";

            import CssBaseline from "@mui/material/CssBaseline";
            import GlobalStyles from "@mui/material/GlobalStyles";
            import { ThemeProvider } from "@mui/material/styles";

            const App = () => {
                return (
                    <ThemeProvider>
                        <CssBaseline />
                        <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ThemeProvider>
                );
            };
            `.trim())},{name:"@refinedev/nestjs-query",description:"NestJS Query data provider integration for Refine",install:"npm install @refinedev/nestjs-query graphql-ws",usage:(0,m.default)(`
            import dataProvider, {
                GraphQLClient,
                liveProvider,
            } from "@refinedev/nestjs-query";

            import { createClient } from "graphql-ws";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(new GraphQLClient( "API_URL" ))}
                        liveProvider={liveProvider(createClient({ url: "WS_URL" }))}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/nestjsx-crud",description:"NestJSX CRUD data provider integration for Refine",install:"npm install @refinedev/nestjsx-crud",usage:(0,m.default)(`
            import dataProvider from "@refinedev/nestjsx-crud";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/react-hook-form",description:"React Hook Form integration for Refine",install:"npm install @refinedev/react-hook-form react-hook-form",usage:(0,m.default)(`
            import { useForm } from "@refinedev/react-hook-form";

            const EditPost = () => {
                const {
                    register,
                    handleSubmit,
                    formState,
                    refineCore,
                } = useForm({
                    refineCoreProps: {
                        resource: "posts",
                        id: "1",
                    },
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/react-table",description:"Tanstack React Table integration for Refine",install:"npm install @refinedev/react-table @tanstack/react-table",usage:(0,m.default)(`
            import { useTable } from "@refinedev/react-table";

            import { ColumnDef, flexRender } from "@tanstack/react-table";

            const EditPost = () => {
                const columns = React.useMemo<ColumnDef<IPost>[]>(
                    () => [
                        {
                            id: "id",
                            header: "ID",
                            accessorKey: "id",
                        },
                        {
                            id: "title",
                            header: "Title",
                            accessorKey: "title",
                            meta: {
                                filterOperator: "contains",
                            },
                        },
                ], []);

                const tableInstance = useTable({
                    columns,
                    refineCoreProps: {
                        resource: "posts",
                    }
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/simple-rest",description:"Data provider integration for REST APIs with Refine",install:"npm install @refinedev/simple-rest",usage:(0,m.default)(`
            import dataProvider from "@refinedev/simple-rest";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/supabase",description:"Data provider and live provider integrations for Supabase with Refine",install:"npm install @refinedev/supabase",usage:(0,m.default)(`
            import { dataProvider, liveProvider, createClient } from "@refinedev/supabase";

            const supabaseClient = createClient("SUPABASE_URL", "SUPABASE_KEY");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(supabaseClient)}
                        liveProvider={liveProvider(supabaseClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi",description:"Strapi integration of Refine",install:"npm install @refinedev/strapi axios",usage:(0,m.default)(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi-v4",description:"StrapiV4 integration of Refine",install:"npm install @refinedev/strapi-v4 axios",usage:(0,m.default)(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi-v4";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())}],ae=async e=>{let t=await L(e);return Ge.filter(r=>!t.includes(r.name))};var se=p(require("preferred-pm")),ce=p(require("execa")),le=async(e,t=process.cwd())=>{try{let{name:r}=await(0,se.default)(t)??{name:"npm"},{failed:o}=await(0,ce.default)(r??"npm",["install",...e.map(s=>`${s}@latest`)]);return!o}catch{return!1}};var de=p(require("execa")),pe=async e=>{try{let{stdout:t}=await(0,de.default)("npm",["view",e,"name","version","--json"]);return JSON.parse(t)}catch{return{name:e}}};var me=require("fs-extra"),fe=p(require("path")),k=async(e=process.cwd())=>{var t;try{let r=await(0,me.readJSON)(fe.default.join(e,"package.json"),{encoding:"utf-8"}),o=(t=r==null?void 0:r.refine)==null?void 0:t.projectId;return o||!1}catch{return null}};var ue=p(require("execa")),ve=async(e,t=process.cwd())=>{try{return ue.default.sync("npm",["pkg","set",`refine.projectId=${e}`],{cwd:t}),!0}catch{return null}};var ge=p(require("execa")),b=p(require("path")),Pe=async(e,t=process.cwd())=>{try{let r=require.resolve(".bin/jscodeshift"),o=ge.default.sync(r,["./","--extensions=ts,tsx,js,jsx","--parser=tsx",`--transform=${b.default.resolve(b.default.join(__dirname,"..","src","project-id","transform.ts"))}`,"--ignore-pattern=**/.cache/**","--ignore-pattern=**/node_modules/**","--ignore-pattern=**/build/**","--ignore-pattern=**/dist/**","--ignore-pattern=**/.next/**",`--__projectId=${e}`],{cwd:t,timeout:1e3*10});o.stderr&&console.error(o.stderr)}catch(r){console.error(r)}};var he=async(e,t=process.cwd())=>{try{return await Promise.all([ve(e,t),Pe(e,t)]),!0}catch{return!1}};var Re=(e,t)=>{e.use("/api",(0,_e.json)()),e.get("/api/connected-app",(c,n)=>{n.json({url:t.connectedApp})}),e.get("/api/activities",(c,n)=>{let{offset:i=0,limit:d=t.activities.length}=c.query;n.setHeader("x-total-count",t.activities.length),n.json({data:t.activities.slice(Number(i),Number(d))})}),e.get("/api/activities/reset",(c,n)=>{t.activities=[],n.json({success:!0})}),e.get("/api/unique-trace-items",(c,n)=>{n.header("Access-Control-Allow-Origin","*"),n.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept");let i=t.activities.flatMap(f=>{var l;return((l=f.trace)==null?void 0:l.map(u=>u.function).filter(Boolean))??[]}),d=(0,ye.default)(i);n.setHeader("x-total-count",d.length),n.json({data:d})});let r=null;e.get("/api/installed-packages",async(c,n)=>{let{force:i}=c.query??{};(!r||i)&&(r=await ie()),n.header("x-total-count",`${r.length}`),n.json({data:r})});let o=null;e.get("/api/available-packages",async(c,n)=>{o||(o=await ae()),n.header("x-total-count",`${o.length}`),n.json({data:o})});let s=new Map;e.get("/api/packages/:packageName/latest",async(c,n)=>{let{packageName:i}=c.params??{};if(!i){n.status(400).json({error:"Package name is required"});return}if(!s.has(i)){let d=await pe(i);s.set(i,d)}return n.json({data:s.get(i)})}),e.post("/api/packages/install",async(c,n)=>{let{packages:i}=c.body??{};if((i==null?void 0:i.length)===0){n.status(400).json({error:"Package name is required"});return}await le(i)?(r=null,o=null,n.status(200).json({success:!0})):n.status(400).json({success:!1,error:"Failed to update package"})});let g=null;e.get("/api/feed",async(c,n)=>{g||(g=await Q()),n.header("x-total-count",`${g.length}`),n.json({data:g})}),e.get("/api/project-id/status",async(c,n)=>{let i={OK:0,NOT_FOUND:1,ERROR:2},d=await k();if(d){n.status(200).json({projectId:d,status:i.OK});return}if(d===!1){n.status(200).json({projectId:null,status:i.NOT_FOUND});return}n.status(200).json({projectId:null,status:i.ERROR})}),e.post("/api/project-id/update",async(c,n)=>{let{projectId:i}=c.body??{};if(!i){n.status(400).json({error:"Project ID is required"});return}if(await he(i)){n.status(200).json({success:!0});return}n.status(500).json({success:!1,error:"Failed to update project ID"})})};var Ee=p(require("path")),x=require("fs-extra"),y=require("http-proxy-middleware");var Te=Ee.default.join(__dirname,"..",".persist.json"),Ae=async(e,t)=>{try{await(0,x.writeJSON)(Te,{token:e,jwt:t})}catch{}},qe=async()=>{try{return await(0,x.readJSON)(Te)}catch{}return{}},Ie=async e=>{let{token:t,jwt:r}=await qe(),o=(0,y.createProxyMiddleware)({target:`${D}/api/.auth`,secure:!1,changeOrigin:!0,logger:void 0,on:{proxyReq:y.fixRequestBody,proxyRes:(l,u)=>{var P;(P=u.url)!=null&&P.includes("self-service/logout/api")&&(t=void 0,r=void 0,Ae())}}}),s=(0,y.createProxyMiddleware)({target:`${N}/.refine`,secure:!1,changeOrigin:!0,logger:void 0,on:{proxyReq:y.fixRequestBody}}),g=null,c=async(l,u,P)=>{g||(g=await k()),g&&(l.headers["x-project-id"]=g),P()},n=async(l,u,P)=>{var v;t&&(l.headers["X-Session-Token"]=t),(v=l.url)!=null&&v.includes("self-service/logout/api")&&(l.body={session_token:t},l.headers["Content-Length"]=Buffer.byteLength(JSON.stringify(l.body)).toString()),P()},i=async(l,u,P)=>{r&&(l.headers.Authorization=`Bearer ${r}`,delete l.headers.cookie),P()},d=async(l,u,P)=>{let v=l.query;v.token&&v.jwt&&(t=v.token,r=v.jwt,await Ae(v.token,v.jwt));let R=new URLSearchParams;v.error&&R.set("error",v.error),v.code&&R.set("code",v.code),u.redirect(`${H}?${R.toString()}`)},f=async(l,u,P)=>{let v=l.query,R=l.secure?"https":"http",w=l.headers.host;if(!w){u.redirect(`${A}?error=Missing%20Host`);return}let Se=`${R}://${w}${A}`,De=new URLSearchParams({provider:v.provider,returnUrl:encodeURIComponent(Se)});u.redirect(`${D}/login?${De.toString()}`)};e.use(V,f),e.use(A,d),e.use("/api/.auth",n,o),e.use("/api/.refine",c,i,s)};var Oe=p(require("path")),Le=(e,t)=>{e.get("/open-in-editor/*",(r,o)=>{let{line:s,column:g}=r.query,c=r.path.replace("/open-in-editor",""),n=`vscode://file/${Oe.default.join(t,c)}?${s?`line=${s}`:""}${g?`&column=${g}`:""}`;o.redirect(n)})};var xe=async({projectPath:e=process.cwd(),onError:t=()=>{process.exit(1)}}={})=>new Promise((r,o)=>{let s=(0,ke.default)(),g=W(s,()=>{o(),t()}),c=M(g,()=>{o(),t()}),n=J();c.on("connection",i=>{(0,a.receive)(i,a.DevtoolsEvent.DEVTOOLS_INIT,d=>{n.connectedApp?(0,a.send)(i,a.DevtoolsEvent.DEVTOOLS_ALREADY_CONNECTED,{url:n.connectedApp}):(n.connectedApp=d.url,n.clientWs=i,c.clients.forEach(f=>{(0,a.send)(f,a.DevtoolsEvent.DEVTOOLS_CONNECTED_APP,{url:n.connectedApp})}))}),(0,a.receive)(i,a.DevtoolsEvent.ACTIVITY,d=>{let f=n.activities.findIndex(u=>u.identifier===d.identifier),l={...d,createdAt:Date.now(),updatedAt:Date.now()};f>-1?(l.createdAt=n.activities[f].createdAt,n.activities[f]=l):n.activities.push(l),c.clients.forEach(u=>{(0,a.send)(u,a.DevtoolsEvent.DEVTOOLS_ACTIVITY_UPDATE,{updatedActivities:[l]})})}),(0,a.receive)(i,a.DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR,({name:d})=>{c.clients.forEach(f=>{(0,a.send)(f,a.DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION,{name:d})})}),(0,a.receive)(i,a.DevtoolsEvent.DEVTOOLS_INVALIDATE_QUERY,({queryKey:d})=>{c.clients.forEach(f=>{(0,a.send)(f,a.DevtoolsEvent.DEVTOOLS_INVALIDATE_QUERY_ACTION,{queryKey:d})})}),(0,a.receive)(i,a.DevtoolsEvent.DEVTOOLS_LOGIN_SUCCESS,()=>{c.clients.forEach(d=>{(0,a.send)(d,a.DevtoolsEvent.DEVTOOLS_RELOAD_AFTER_LOGIN,{})})}),(0,a.receive)(i,a.DevtoolsEvent.DEVTOOLS_LOGIN_FAILURE,({error:d,code:f})=>{c.clients.forEach(l=>{(0,a.send)(l,a.DevtoolsEvent.DEVTOOLS_DISPLAY_LOGIN_FAILURE,{error:d,code:f})})}),i.on("close",(d,f)=>{n.clientWs&&(c.clients.has(n.clientWs)||(n.clientWs=null,n.connectedApp=null,n.activities=[],c.clients.forEach(l=>{(0,a.send)(l,a.DevtoolsEvent.DEVTOOLS_DISCONNECTED_APP,{url:n.connectedApp})})))})}),G(c),U(s),Re(s,n),Ie(s),Le(s,e),process.on("SIGTERM",()=>{o()})});xe().catch(()=>0);
//# sourceMappingURL=cli.cjs.map